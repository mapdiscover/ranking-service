# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import mdrankingservice_pb2 as mdrankingservice__pb2


class MDRankingServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getIdents = channel.unary_unary(
                '/MDRankingService/getIdents',
                request_serializer=mdrankingservice__pb2.identifiers.SerializeToString,
                response_deserializer=mdrankingservice__pb2.identifiersOut.FromString,
                )
        self.addEntry = channel.unary_unary(
                '/MDRankingService/addEntry',
                request_serializer=mdrankingservice__pb2.entry.SerializeToString,
                response_deserializer=mdrankingservice__pb2.status.FromString,
                )
        self.increaseClick = channel.unary_unary(
                '/MDRankingService/increaseClick',
                request_serializer=mdrankingservice__pb2.click.SerializeToString,
                response_deserializer=mdrankingservice__pb2.status.FromString,
                )
        self.feedback = channel.unary_unary(
                '/MDRankingService/feedback',
                request_serializer=mdrankingservice__pb2.status.SerializeToString,
                response_deserializer=mdrankingservice__pb2.status.FromString,
                )
        self.batch = channel.unary_unary(
                '/MDRankingService/batch',
                request_serializer=mdrankingservice__pb2.diff.SerializeToString,
                response_deserializer=mdrankingservice__pb2.status.FromString,
                )
        self.deleteEntry = channel.unary_unary(
                '/MDRankingService/deleteEntry',
                request_serializer=mdrankingservice__pb2.identifier.SerializeToString,
                response_deserializer=mdrankingservice__pb2.status.FromString,
                )


class MDRankingServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def getIdents(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addEntry(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def increaseClick(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def feedback(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def batch(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteEntry(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MDRankingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getIdents': grpc.unary_unary_rpc_method_handler(
                    servicer.getIdents,
                    request_deserializer=mdrankingservice__pb2.identifiers.FromString,
                    response_serializer=mdrankingservice__pb2.identifiersOut.SerializeToString,
            ),
            'addEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.addEntry,
                    request_deserializer=mdrankingservice__pb2.entry.FromString,
                    response_serializer=mdrankingservice__pb2.status.SerializeToString,
            ),
            'increaseClick': grpc.unary_unary_rpc_method_handler(
                    servicer.increaseClick,
                    request_deserializer=mdrankingservice__pb2.click.FromString,
                    response_serializer=mdrankingservice__pb2.status.SerializeToString,
            ),
            'feedback': grpc.unary_unary_rpc_method_handler(
                    servicer.feedback,
                    request_deserializer=mdrankingservice__pb2.status.FromString,
                    response_serializer=mdrankingservice__pb2.status.SerializeToString,
            ),
            'batch': grpc.unary_unary_rpc_method_handler(
                    servicer.batch,
                    request_deserializer=mdrankingservice__pb2.diff.FromString,
                    response_serializer=mdrankingservice__pb2.status.SerializeToString,
            ),
            'deleteEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteEntry,
                    request_deserializer=mdrankingservice__pb2.identifier.FromString,
                    response_serializer=mdrankingservice__pb2.status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MDRankingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MDRankingService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def getIdents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MDRankingService/getIdents',
            mdrankingservice__pb2.identifiers.SerializeToString,
            mdrankingservice__pb2.identifiersOut.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MDRankingService/addEntry',
            mdrankingservice__pb2.entry.SerializeToString,
            mdrankingservice__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def increaseClick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MDRankingService/increaseClick',
            mdrankingservice__pb2.click.SerializeToString,
            mdrankingservice__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def feedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MDRankingService/feedback',
            mdrankingservice__pb2.status.SerializeToString,
            mdrankingservice__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def batch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MDRankingService/batch',
            mdrankingservice__pb2.diff.SerializeToString,
            mdrankingservice__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MDRankingService/deleteEntry',
            mdrankingservice__pb2.identifier.SerializeToString,
            mdrankingservice__pb2.status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
